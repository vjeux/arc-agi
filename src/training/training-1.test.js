// 007bbfb7
const t = {
  test: [
    {
      input: [
        [7, 0, 7],
        [7, 0, 7],
        [7, 7, 0],
      ],
      output: [
        [7, 0, 7, 0, 0, 0, 7, 0, 7],
        [7, 0, 7, 0, 0, 0, 7, 0, 7],
        [7, 7, 0, 0, 0, 0, 7, 7, 0],
        [7, 0, 7, 0, 0, 0, 7, 0, 7],
        [7, 0, 7, 0, 0, 0, 7, 0, 7],
        [7, 7, 0, 0, 0, 0, 7, 7, 0],
        [7, 0, 7, 7, 0, 7, 0, 0, 0],
        [7, 0, 7, 7, 0, 7, 0, 0, 0],
        [7, 7, 0, 7, 7, 0, 0, 0, 0],
      ],
    },
  ],
  train: [
    {
      input: [
        [0, 7, 7],
        [7, 7, 7],
        [0, 7, 7],
      ],
      output: [
        [0, 0, 0, 0, 7, 7, 0, 7, 7],
        [0, 0, 0, 7, 7, 7, 7, 7, 7],
        [0, 0, 0, 0, 7, 7, 0, 7, 7],
        [0, 7, 7, 0, 7, 7, 0, 7, 7],
        [7, 7, 7, 7, 7, 7, 7, 7, 7],
        [0, 7, 7, 0, 7, 7, 0, 7, 7],
        [0, 0, 0, 0, 7, 7, 0, 7, 7],
        [0, 0, 0, 7, 7, 7, 7, 7, 7],
        [0, 0, 0, 0, 7, 7, 0, 7, 7],
      ],
    },
    {
      input: [
        [4, 0, 4],
        [0, 0, 0],
        [0, 4, 0],
      ],
      output: [
        [4, 0, 4, 0, 0, 0, 4, 0, 4],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 4, 0, 0, 0, 0, 0, 4, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 4, 0, 4, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 4, 0, 0, 0, 0],
      ],
    },
    {
      input: [
        [0, 0, 0],
        [0, 0, 2],
        [2, 0, 2],
      ],
      output: [
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 2],
        [0, 0, 0, 0, 0, 0, 2, 0, 2],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 2, 0, 0, 0, 0, 0, 2],
        [2, 0, 2, 0, 0, 0, 2, 0, 2],
      ],
    },
    {
      input: [
        [6, 6, 0],
        [6, 0, 0],
        [0, 6, 6],
      ],
      output: [
        [6, 6, 0, 6, 6, 0, 0, 0, 0],
        [6, 0, 0, 6, 0, 0, 0, 0, 0],
        [0, 6, 6, 0, 6, 6, 0, 0, 0],
        [6, 6, 0, 0, 0, 0, 0, 0, 0],
        [6, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 6, 6, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 6, 6, 0, 6, 6, 0],
        [0, 0, 0, 6, 0, 0, 6, 0, 0],
        [0, 0, 0, 0, 6, 6, 0, 6, 6],
      ],
    },
    {
      input: [
        [2, 2, 2],
        [0, 0, 0],
        [0, 2, 2],
      ],
      output: [
        [2, 2, 2, 2, 2, 2, 2, 2, 2],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 2, 2, 0, 2, 2, 0, 2, 2],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 2, 2, 2, 2, 2],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 2, 2, 0, 2, 2],
      ],
    },
  ],
};

import solve from "./training-1";
import { describe, test, expect } from "vitest";

describe("training-1", () => {
  [...t.test, ...t.train].forEach((t, i) => {
    test("Test " + i, () => {
      expect(solve(t.input)).toEqual(t.output);
    });
  });
});
